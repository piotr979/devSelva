-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: db
-- Generation Time: Jan 04, 2023 at 06:33 PM
-- Server version: 5.7.40
-- PHP Version: 8.0.19

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `devride`
--

-- --------------------------------------------------------

--
-- Table structure for table `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `title` varchar(80) COLLATE utf8mb4_unicode_ci NOT NULL,
  `subtitle` varchar(512) COLLATE utf8mb4_unicode_ci NOT NULL,
  `icon` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` datetime NOT NULL COMMENT '(DC2Type:datetime_immutable)',
  `content` longtext COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `article`
--

INSERT INTO `article` (`id`, `title`, `subtitle`, `icon`, `created_at`, `content`) VALUES
(1, 'MySQL First steps', 'First steps in MySQL.', 'death-star.svg', '2023-01-04 18:23:18', '<div class=\"navigator-text--content\">\r\n<h2 class=\"article-title mb-1\">MySQL First steps</h2>\r\n<p>One of the methods is just to simply download <a href=\"https://dev.mysql.com/downloads/installer/\" target=\"_blank\" rel=\"noreferrer noopener\">installer file</a>. Although you may think it requires registration you can skip this step and download it directly. I recommend download bigger file (more than 400MB as it contains all necessary files).</p>\r\n<div class=\"wp-block-spacer\" style=\"height: 21px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<h3 id=\"chapter-1\" class=\"navigator-chapter\"><h3 id=\"1015adc4-5b13-4534-841f-c64564c3a015\" class=\"navigator-chapter\">Installation on Windows</h3></h3>\r\n<div class=\"wp-block-spacer\" style=\"height: 11px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>Launch the installer and choose following items:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-71\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlInstalled.png\" alt=\"\" width=\"600\" height=\"452\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>Next, configure server by choosing &lsquo;Development Machine&rsquo;, connectivity TCP/IP and port number 3306.</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-72\" src=\"http://devstripp.com/wp-content/uploads/2022/02/MysqlSettings.png\" alt=\"\" width=\"599\" height=\"451\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>When you click &ldquo;next&rdquo; you will choose Authentication method:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-73\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlAuthMethod.png\" alt=\"\" width=\"599\" height=\"451\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>In the next set you have to choose MySQL password:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-74\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlPassword.png\" alt=\"\" width=\"599\" height=\"453\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>In the next section choose the name for the service. By default is MySQL80 (8.0 version).When done configuration will be applied:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-78\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlConfiguring.png\" alt=\"\" width=\"562\" height=\"422\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>In the next step we have to enter our password:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-79\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlSucceed.png\" alt=\"\" width=\"578\" height=\"436\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>After completing it the configurations must be applied and you are ready to go.</p>\r\n<p>Launch mySQL client from Windows start menu:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-81\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysql-client.png\" alt=\"\" width=\"358\" height=\"68\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>And enter your password:</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-80\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlPasswordClient.png\" alt=\"\" width=\"466\" height=\"135\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 23px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>Now you can start working with mySQL.</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-82\" src=\"http://devstripp.com/wp-content/uploads/2022/02/mysqlClientLogged.png\" alt=\"\" width=\"738\" height=\"335\" /></figure>\r\n<div class=\"wp-block-spacer\" style=\"height: 10px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>Remember MySQL server will launch with your Windows, if you need to change it to manual mode or disabled it, go to services.msc and find MySQL80.</p>\r\n<p>&nbsp;</p>\r\n<h3 id=\"chapter-2\" class=\"navigator-chapter\">Installation on Mac</h3>\r\n<p>Looks pretty same like for Windows except you need to choose OSX from the list of available downloads. <a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noreferrer noopener\">Link here</a>.</p>\r\n<p>Also you can use Homebrew to install it.</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">brew install mysql</code></pre>\r\n<p>To launch MySQL server type:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">brew services start mysql</code></pre>\r\n<p>Next it to run following command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">mysql_secure_installation</code></pre>\r\n<p>When in execute it you can set your password for MySQL and some other options.</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-149\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-10-at-21.14.30-1024x655.png\" alt=\"\" width=\"450\" height=\"288\" /></figure>\r\n<p>Now, you can launch mysql (by default MySQL server should start immediately):</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">mysql -u root -p</code></pre>\r\n<p>To start/stop MySQL server use following commands:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">mysql.server start\r\n mysql.server stop</code></pre>\r\n<h3 id=\"chapter-3\" class=\"navigator-chapter\">Basic commands</h3>\r\n<p>First command I&rsquo;d like to introduce is to display all databases:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">SHOW DATABASES;</code></pre>\r\n<p>In result all databases on server will be shown. Don&rsquo;t forget about semicolon at the end of the command. In my case this command displayed all sample databases.</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-154\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-10-at-21.23.08-1024x316.png\" alt=\"\" width=\"545\" height=\"168\" /></figure>\r\n<p>To create new database, just type in the console:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">CREATE DATABASE sampleDB;</code></pre>\r\n<p>You can also quickly delete existing database with following command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">DROP DATABASE sampleDB;</code></pre>\r\n<p>To work with our database we need to switch to it:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">USE sampleDB;</code></pre>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-158\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-11-at-07.18.54-1024x395.png\" alt=\"\" width=\"488\" height=\"188\" /></figure>\r\n<h3 id=\"chapter-4\" class=\"navigator-chapter\">Creating table</h3>\r\n<p>At first we will create the simplest table possible with just one. Each database can consist of many tables and each table contains rows and columns.</p>\r\n<p>Each row is called <strong>record</strong>, <strong>object </strong>or <strong>entity</strong>. Each record contains <strong>fields</strong>, which is single cell in the table.</p>\r\n<p>When new table is created you have to define datatypes. They can be very common like integers or strings to more sophisticated like DATETIME or JSON. List of all datatypes can be found <a href=\"https://dev.mysql.com/doc/refman/8.0/en/data-types.html\" target=\"_blank\" rel=\"noreferrer noopener\">here.</a></p>\r\n<p>&nbsp;</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">CREATE TABLE firstTable //1\r\n( //2\r\n    id INT PRIMARY KEY, //3\r\n    name VARCHAR(40) //4\r\n) //5</code></pre>\r\n<p>//1 First row is MySQL command with our new table name</p>\r\n<p>//2 and //5 are brackets which define block with definition of the columns</p>\r\n<p>//3 this line defines &ldquo;id&rdquo; integer (&ldquo;INT&rdquo;) with &ldquo;PRIMARY KEY&rdquo; constraint. Primary keys must contain unique values and can&rsquo;t be null. They help to identify rows and let access to table data in fast manner. Don&rsquo;t forget about comma if you define next line!</p>\r\n<p>//4 here we have definition of &ldquo;name&rdquo; row which is VARCHAR datatype. As name suggest it can store variable characters with limit set to 40. These chars can be letters, numbers and others.</p>\r\n<h3 id=\"chapter-5\" class=\"navigator-chapter\">Displaying data</h3>\r\n<p>Now, to show all tables in our database just use the command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">SHOW TABLES;</code></pre>\r\n<p>and it will print out to the console:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-159\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-11-at-07.42.02-1024x394.png\" alt=\"\" width=\"495\" height=\"190\" /></figure>\r\n<p>To show columns we created in our firstTable, enter following command;</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">SHOW COLUMNS FROM firstTable;</code></pre>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-254\" src=\"http://devselva.com/wp-content/uploads/2022/04/Screenshot-2022-04-03-at-08.59.35-1024x276.png\" alt=\"\" width=\"509\" height=\"137\" /></figure>\r\n<h3 id=\"chapter-6\" class=\"navigator-chapter\">A bit more about creating table</h3>\r\n<p>After creating our first table let&rsquo;s delete it as we are going to create table with auto increment id for each item added:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">DROP TABLE firstTable;</code></pre>\r\n<p>And add new one with the same name but with little difference:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">CREATE TABLE firstTable \r\n    ( id INT AUTO_INCREMENT, \r\n      name VARCHAR(40) NOT NULL,\r\n      PRIMARY KEY (id) \r\n);</code></pre>\r\n<p>There is new keyword here &ldquo;AUTO_INCREMENT&rdquo; which lets our database to automatically increase value of &ldquo;id&rdquo;. It can be used for searching records by &ldquo;id&rdquo; which corresponds to only one record, therefore is unique. Also &ldquo;PRIMARY KEY&rdquo; has been moved to the end of the expression. It&rsquo;s just alternative way of adding this keyword to the table.</p>\r\n<p>You can also notice &ldquo;NOT NULL&rdquo; close to &ldquo;name&rdquo;. When new data being added &ldquo;name&rdquo; field must be filled, cannot be left out.</p>\r\n<p>&nbsp;</p>\r\n<h3 id=\"chapter-7\" class=\"navigator-chapter\">Adding data to table</h3>\r\n<p>To add data to the existing table (&ldquo;firstTable&rdquo; in our case) type the following command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-sql\" tabindex=\"0\"><code class=\"language-sql\">INSERT INTO ndTable(name) VALUE(\'name\');</code></pre>\r\n<p>Let&rsquo;s display our first inserted data:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-265\" src=\"http://devselva.com/wp-content/uploads/2022/04/Screenshot-2022-04-03-at-18.03.30-1024x250.png\" alt=\"\" width=\"579\" height=\"141\" /></figure>\r\n<p>As you can notice inserting &ldquo;id&rdquo; was not needed as this column was autopopulated with integer.</p>\r\n<p>TO BE CONTINUED&hellip;</p>\r\n</div>\r\n<p>&nbsp;</p>'),
(2, 'Symfony installation', 'Windows installation There are few ways to install Symfony on Windows. I will show how to install from very beginning with all tools recommended and required. Imagine you have fresh copy of Windows installed and you need PHP, Composer and Symfony.', 'space-shuttle-launch.svg', '2023-01-04 18:24:57', '<h3 id=\"chapter-1\" class=\"navigator-chapter\">Windows installation</h3>\r\n<p>There are few ways to install Symfony on Windows. I will show how to install from very beginning with all tools recommended and required. Imagine you have fresh copy of Windows installed and you need PHP, Composer and Symfony.</p>\r\n<div class=\"wp-block-spacer\" style=\"height: 19px;\" aria-hidden=\"true\">&nbsp;</div>\r\n<p>Let&rsquo;s start with running PowerShell (it comes with Windows 10 Anniversary Update and Windows Server 2016. If you don&rsquo;t have it follow instructions <a href=\"https://docs.microsoft.com/en-us/skypeforbusiness/set-up-your-computer-for-windows-powershell/download-and-install-windows-powershell-5-1\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.) Just press Windows key and start typing PowerShell. Run the app:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-189\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-1024x453.png\" alt=\"\" width=\"505\" height=\"223\" /></figure>\r\n<p>Now we need to install <a href=\"https://scoop.sh/\" target=\"_blank\" rel=\"noreferrer noopener\">Scoop package manager</a>. Run one of the following commands in the PowerShell:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(\'https://get.scoop.sh\')\r\n\r\n# or shorter\r\niwr -useb get.scoop.sh | iex</code></pre>\r\n<p>You may encounter following error:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-195\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-1-1024x224.png\" alt=\"\" width=\"553\" height=\"120\" /></figure>\r\n<p>If so, run the command, enter Y for YES and try to install Scoop again:</p>\r\n<p>Set-ExecutionPolicy RemoteSigned -scope CurrentUser</p>\r\n<p>Now we have Scoop installed, let&rsquo;s install PHP and Symfony:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">scoop install php\r\nscoop install symfony-cli</code></pre>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-197\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-2-1024x445.png\" alt=\"\" width=\"514\" height=\"223\" />\r\n<figcaption>Installing PHP</figcaption>\r\n</figure>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-198\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-3-1024x440.png\" alt=\"\" width=\"519\" height=\"222\" />\r\n<figcaption>Symfony installed successfully</figcaption>\r\n</figure>\r\n<h4>Where are these apps installed???</h4>\r\n<p>There are in the scoop/apps folder. Let&rsquo;s get to it:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">cd ~/scoop/apps\r\n\r\n</code></pre>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-200\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-4-1024x149.png\" alt=\"\" width=\"1024\" height=\"149\" />\r\n<figcaption>List of our install apps: PHP and Symfony-CLI</figcaption>\r\n</figure>\r\n<p>Now it&rsquo;s time to set Symfony as global command. Press Windows key and enter:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">sysdm.cpl</code></pre>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-201\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-5.png\" alt=\"\" width=\"392\" height=\"428\" /></figure>\r\n<p>Choose &ldquo;Advanced&rdquo; and click Envionment Variables. Add new user Variable (click new) and enter new name Symfony and select file:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-203\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-7-1024x288.png\" alt=\"\" width=\"516\" height=\"145\" /></figure>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-202\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-6-1024x691.png\" alt=\"\" width=\"446\" height=\"300\" /></figure>\r\n<p>Now we need to reboot computer and we are ready to go!</p>\r\n<p>The last command to run in PowerShell is Composer installation:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">scoop install composer</code></pre>\r\n<h3 id=\"chapter-2\" class=\"navigator-chapter\">Mac installation</h3>\r\n<p>To install Symfony on Mac we are going to use <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noreferrer noopener\">Homebrew</a>. To install it run terminal and enter the command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></pre>\r\n<p>Now we can install PHP and Symfony:</p>\r\n<p>brew install PHP brew install symfony-cli/tap/symfony-cli</p>\r\n<p>&nbsp;</p>'),
(3, 'First test in Symfony', 'PHPUnit is one of the most popular unit testing packages for PHP and obviously can be used with Symfony.', 'rick.svg', '2023-01-04 18:28:09', '<div class=\"navigator-text--container\">\r\n<div class=\"navigator-text--content\">\r\n<p>PHPUnit is one of the most popular unit testing packages for PHP and obviously can be used with Symfony.</p>\r\n<h3 id=\"88ebdd16-5e82-473d-9490-fc5eae29ea87\" class=\"navigator-chapter\">Installing PHP Unit</h3>\r\n<h3 id=\"chapter-1\" class=\"navigator-chapter\"></h3>\r\n<p>First step is to install PHP Unit. Run the following command in a console:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">composer require --dev symfony/php-unit-bridge</code></pre>\r\n<p>In the case you have a problem to install or use PHP Unit you may want to install it as follows:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">composer require --dev phpunit/phpunit symfony/test-pack</code></pre>\r\n<h3 id=\"chapter-2\" class=\"navigator-chapter\">Writing test</h3>\r\n<p>Now it&rsquo;s possible to create first unit test:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">php bin/console make:unit-test</code></pre>\r\n<p>Let&rsquo;s name it CalcTest. When done we can create new file named CalcTest in &ldquo;test&rdquo; folder:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\r\n\r\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Tests</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">use</span> <span class=\"token package\">PHPUnit<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">CalcTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token variable\">$number</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">assertAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \r\n    <span class=\"token punctuation\">{</span>\r\n       <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></span></code></pre>\r\n<p>To run this test enter in the console:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">./bin/phpunit</code></pre>\r\n<p>If you are stuck somewhere or just simply need help try this command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-bash\" tabindex=\"0\"><code class=\"language-bash\">./bin/phpunit --help</code></pre>\r\n<p>The long list of all assertions can be found <a href=\"https://phpunit.readthedocs.io/en/9.5/assertions.html\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>'),
(4, 'Using Boostrap and Sass in Symphony', 'Boostrap framework and SASS are commonly used and very popular tools to speed up process of creating projects.', 'space-ship_2.svg', '2023-01-04 18:30:44', '<p>Boostrap framework and SASS are commonly used and very popular tools to speed up process of creating projects. Also they beautifuly integrate with Symfony and can be used directly while developing. Let&rsquo;s start from beginning and see how easily Boostrap and Sass can be added to our project.</p>\r\n<h3 id=\"chapter-1\" class=\"navigator-chapter\">Installing Sass and Boostrap</h3>\r\n<p>You need to have PHP, Symfony and Composer installed already. If you have Mac everything can be done with Homebrew and Scoop on Windows.</p>\r\n<p>Let&rsquo;s create our basic project:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">composer create-project symfony/skeleton my_project</code></pre>\r\n<p>Also we need NPM (or Yarn) installed. As I normally use NPM I always add it to my project with just this simple command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">npm install</code></pre>\r\n<p>Now it&rsquo;s time to add Encore. It&rsquo;s package that keeps our all assets (images, scripts, styles) in &ldquo;assets&rdquo; folder outside the public one. To &ldquo;copy&rdquo; them to the public folder we need to use NPM. But let&rsquo;s install Encore first:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">composer require symfony/webpack-encore-bundle\r\nNpm install @symfony/webpack-encore -dev </code></pre>\r\n<p>Time to add Boostrap and PopperJS (which is required by Boostrap) with NPM command:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">npm install boostrap --save-dev \r\nnpm install jquery @popperjs/core --save-dev</code></pre>\r\n<p>And lastly add Sass:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">npm install sass-loader@^12.0.0 sass --save-dev</code></pre>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-214\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-20-at-06.59.20-1024x569.png\" alt=\"\" width=\"596\" height=\"330\" />\r\n<figcaption>Added Boostrap, PopperJS and Sass loader packages with NPM</figcaption>\r\n</figure>\r\n<h3 id=\"chapter-2\" class=\"navigator-chapter\">Enabling Boostrap and Sass</h3>\r\n<p>After the whole installation process let&rsquo;s enable both tools. To set Sass on go to file &ldquo;webpack.config.js&rdquo; and uncomment &ldquo;.enableSassLoader&rdquo;:</p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-215\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-20-at-07.09.04-1024x190.png\" alt=\"\" width=\"1024\" height=\"190\" /></figure>\r\n<p>And done! Sass is activated. Now Boostrap. Our entrypoint for css is app.css but we need to update to be compatible with scss therefore suffix needs to be changed. <strong>Rename &ldquo;assets/styles/app.css&rdquo; to &ldquo;assets/styles/app.scss&rdquo;. </strong> Also we need to update assets/app.js and change the main css file to scss. Remove following line:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">import \'./styles/app.css\';</code></pre>\r\n<p>And add:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">import \'./styles/app.scss\';</code></pre>\r\n<p>Now the last step is to add &ldquo;@import&rdquo; command to our &ldquo;assets/styles/app.scss&rdquo; file:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">@import \"~bootstrap/scss/bootstrap\";</code></pre>\r\n<p>And we are done!</p>\r\n<h3 id=\"chapter-3\" class=\"navigator-chapter\">Watching changes in assets folder</h3>\r\n<p>Now we have everything set up it&rsquo;s time to use our Boostrap and Sass.</p>\r\n<p>As all our files (styles, js files,etc.) are kept in asset folder browser has no access to them during runtime. They need to be &ldquo;moved&rdquo; somehow to public folder. Take a look at the screenshot.</p>\r\n<p>&nbsp;</p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-217\" src=\"http://devselva.com/wp-content/uploads/2022/03/Screenshot-2022-03-20-at-07.03.37-315x1024.png\" alt=\"\" width=\"315\" height=\"1024\" />\r\n<figcaption>Files from assets must be copied (1) to public/build (2) with NPM command</figcaption>\r\n</figure>\r\n<p>Luckily there are commands which automates the whole process:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">npm run watch</code></pre>\r\n<p>Remember the above command will block your terminal so I recommend it to run in separate window. Also you can do single processing:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">npm run dev</code></pre>\r\n<p>It will copy files to &ldquo;public/build&rdquo; folder creating source map and not minifying js/scss/css files. To minify them another command must be run:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">npm run production</code></pre>\r\n<p>&nbsp;</p>'),
(5, 'Highlight selected menu item with Twig in Symfony', 'Very common designed websites have navigation menu where selected page corresponds to highlighted item in the menu. It lets figure out instantly what page is open and also gives a little variation to our design.', 'space-rocket.svg', '2023-01-04 18:31:32', '<div class=\"navigator-text--content\">\r\n<h2 class=\"article-title mb-1\">&nbsp;</h2>\r\n<p>Very common designed websites have navigation menu where selected page corresponds to highlighted item in the menu. It lets figure out instantly what page is open and also gives a little variation to our design.</p>\r\n<h3 id=\"chapter-1\" class=\"navigator-chapter\">CSS Basics</h3>\r\n<p>How is it done? By using CSS. We simply add class named for example &ldquo;active&rdquo; to each anchor.</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-229\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-11-1024x89.png\" alt=\"\" width=\"535\" height=\"46\" /></figure>\r\n<p>There are millions way how the item is in enabled state. It can be colorization, underline, some animation, etc. For our learning purposes I simply create class which changes the color of the item:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.active</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>Now we need to use this class with one of our anchors. Let&rsquo;s say we have home page, articles pages,etc.</p>\r\n<figure class=\"wp-block-image size-full is-resized\"><img class=\"wp-image-228\" src=\"http://devselva.com/wp-content/uploads/2022/03/image-10.png\" alt=\"\" width=\"198\" height=\"47\" /></figure>\r\n<p>We add it to our menu in home.html file or mostly in this case &ndash; to index.html file like below:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-none\" tabindex=\"0\"><code class=\"language-none\">&lt;ul class=\"navbar\"&gt;\r\n    &lt;li&gt;\r\n        &lt;a class=\"active\" href=\"index.html\"&gt;Home&lt;/a&gt;\r\n    &lt;/li&gt;\r\n    &lt;li&gt;\r\n        &lt;a href=\"index.html\"&gt;Articles&lt;/a&gt;\r\n    &lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\r\n<h3 id=\"chapter-2\" class=\"navigator-chapter\">Highlight with Twig</h3>\r\n<p>But how to do it with Twig so for example we can don&rsquo;t need to have the menu in separate files, but just simply have it in &ldquo;base.html.twig&rdquo; file and reuse is automatically?</p>\r\n<p>We can just simply use &ldquo;if&rdquo; function with access to &ldquo;app.request.attributes&rdquo;:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link {% if app.request.attributes.get(<span class=\"token punctuation\">\'</span>_route<span class=\"token punctuation\">\'</span>) == <span class=\"token punctuation\">\'</span>main<span class=\"token punctuation\">\'</span> %} \r\n        active {% endif %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ path(<span class=\"token punctuation\">\'</span>main<span class=\"token punctuation\">\'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Home\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\r\n<p>We can simply compare &ldquo;_route&rdquo; name with current route (&ldquo;main&rdquo; in this case&rdquo;) and apply &ldquo;active&rdquo; class. The code for two items is as below:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navbar-nav ms-auto <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link {% if app.request.attributes.get(<span class=\"token punctuation\">\'</span>_route<span class=\"token punctuation\">\'</span>) == <span class=\"token punctuation\">\'</span>home<span class=\"token punctuation\">\'</span> %} \r\n        active {% endif %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ path(<span class=\"token punctuation\">\'</span>main<span class=\"token punctuation\">\'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Home<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link nav-link {% if app.request.attributes.get(<span class=\"token punctuation\">\'</span>_route<span class=\"token punctuation\">\'</span>) == <span class=\"token punctuation\">\'</span>articles<span class=\"token punctuation\">\'</span> %}\r\n         active {% endif %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{{ path(<span class=\"token punctuation\">\'</span>articles<span class=\"token punctuation\">\'</span>) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Articles<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\r\n<p>To simplify code we can use paramters with code block and attach it with &ldquo;include&rdquo; twig statement.</p>\r\n<h3 id=\"chapter-2\" class=\"navigator-chapter\">Improving with include function</h3>\r\n<p>If you have two or three items in menu i&rsquo;ts ok to use code above, however there is a way to improve our code and move list items to separate, reusable file.</p>\r\n<p>First we modify our unordered list with the following code:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-html\" tabindex=\"0\"><code class=\"language-html\">{% set currentRoute = app.request.attributes.get(\'_route\') %}\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navbar-nav ms-auto <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n	{{ include(\'menu-item.html.twig\', {currentRoute: currentRoute, route: \'home\' }) }}\r\n	{{ include(\'menu-item.html.twig\', {currentRoute: currentRoute, route: \'articles\' }) }}\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\r\n<p>As you can see new variable currentRoute is set. It gets current route and then we pass it as parameter to our included file &ldquo;menu-item.html.twig&rdquo;. Also we pass route name which we will use to compare with current one. Also it&rsquo;s name for menu item.</p>\r\n<p>Now create separate twig file called &ldquo;menu-item.html.twig&rdquo; and create new list item:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nav-link {% if currentRoute == route %} active {% endif %} <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n                {{ route|capitalize }}\r\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\r\n<p>It compares currentRoute variable with the route we expected to be highlighted (&ldquo;active&rdquo;). Also &ldquo;route&rdquo; variable is used as menu item name (with first letter capitalized).</p>\r\n</div>\r\n<p>&nbsp;</p>');
INSERT INTO `article` (`id`, `title`, `subtitle`, `icon`, `created_at`, `content`) VALUES
(6, 'Symfony login and register forms on the same page.', 'How to have login and register form on the same page?', 'earth.svg', '2023-01-04 18:32:38', '<h2 class=\"article-title mb-1\">&nbsp;</h2>\r\n<h2 id=\"chapter-1\" class=\"navigator-chapter\">Introduction</h2>\r\n<p>Many moderns websites use the same website for logging and registering users. Page is divided by half and user/customer have two options available on one screen:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-250\" src=\"http://devselva.com/wp-content/uploads/2022/04/Screenshot-2022-04-03-at-08.25.32-1024x271.png\" alt=\"\" width=\"835\" height=\"221\" /></figure>\r\n<h2 id=\"chapter-1\" class=\"navigator-chapter\">The problem</h2>\r\n<p>Normally when new registration and log in/out forms are generated with maker they are in seperate controllers. Well, there is nothing more easy than just join two forms and move lines of code from one route (let&rsquo;s say SecurityController/login route) to Registration controller/app_register route.</p>\r\n<p>Unfortunately there is an issue with processing as if you try to submit registration form the login form is processed giving you error as the login form is empty:</p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-246\" src=\"http://devselva.com/wp-content/uploads/2022/04/Screenshot-2022-03-31-at-22.26.33-1024x271.png\" alt=\"\" width=\"823\" height=\"218\" /></figure>\r\n<p>Also you can&rsquo;t distinguish two forms because login form is build in more traditional manner where registration form is made with builder.</p>\r\n<h2 id=\"chapter-1\" class=\"navigator-chapter\">Solution</h2>\r\n<p>First, edit our app_login route by adding registration form:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">SecurityController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractController</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token attribute-class-name class-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">\'/login\'</span><span class=\"token punctuation\">,</span> <span class=\"token attribute-class-name class-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">\'app_login\'</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> \r\n                    <span class=\"token class-name type-declaration\">AuthenticationUtils</span> <span class=\"token variable\">$authenticationUtils</span><span class=\"token punctuation\">,</span> \r\n                    <span class=\"token class-name type-declaration\">UserPasswordHasherInterface</span> <span class=\"token variable\">$userPasswordHasher</span><span class=\"token punctuation\">,</span> \r\n                    <span class=\"token class-name type-declaration\">EntityManagerInterface</span> <span class=\"token variable\">$entityManager</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">Response</span>\r\n    <span class=\"token punctuation\">{</span>\r\n   \r\n    <span class=\"token variable\">$error</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$authenticationUtils</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getLastAuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token variable\">$lastUsername</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$authenticationUtils</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getLastUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token variable\">$regForm</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">createForm</span><span class=\"token punctuation\">(</span><span class=\"token class-name static-context\">RegistrationFormType</span><span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\r\n        <span class=\"token string single-quoted-string\">\'action\'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">generateUrl</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">\'app_register\'</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">\'customer/customer-account.html.twig\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\r\n        <span class=\"token string single-quoted-string\">\'regForm\'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$regForm</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">createView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token string single-quoted-string\">\'last_username\'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$lastUsername</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">\'error\'</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$error</span>\r\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    \r\n    <span class=\"token attribute\"><span class=\"token delimiter punctuation\">#[</span><span class=\"token attribute-content\"><span class=\"token attribute-class-name class-name\">Route</span><span class=\"token punctuation\">(</span><span class=\"token attribute-class-name class-name\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">\'/logout\'</span><span class=\"token punctuation\">,</span> <span class=\"token attribute-class-name class-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string single-quoted-string\">\'app_logout\'</span><span class=\"token punctuation\">)</span></span><span class=\"token delimiter punctuation\">]</span></span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">void</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">addFlash</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">\'notice\'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">\'You have been logged out successfully.\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>What it&rsquo;s important here, we add &lsquo;action&rsquo; to our regForm. This action redirects to &ldquo;app_register&rdquo; route when registration form is submitted.</p>\r\n<p>Next step is to modify our twig login/register template where we also add &ldquo;action&rdquo; to logging form:</p>\r\n<pre class=\"wp-block-jxxe-code-block language-php\" tabindex=\"0\"><code class=\"language-php\"><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"{{ path(\'app_login\') }}\"</span> method<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"post\"</span><span class=\"token operator\">&gt;</span>\r\n	<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> error <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\r\n	    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"alert alert-danger\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> \r\n            error<span class=\"token operator\">.</span><span class=\"token class-name\">messageKey</span><span class=\"token operator\">|</span><span class=\"token class-name\">trans</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">.</span>messageData<span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">\'security\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\r\n	<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\r\n\r\n	<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> app<span class=\"token operator\">.</span>user <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\r\n		You are logged in <span class=\"token keyword\">as</span>\r\n		<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> app<span class=\"token operator\">.</span>user<span class=\"token operator\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n		<span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"{{ path(\'app_logout\') }}\"</span><span class=\"token operator\">&gt;</span>Logout<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\r\n\r\n	<span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\r\n	<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"mb-3\"</span><span class=\"token operator\">&gt;</span>\r\n		<span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"form-label required d-block mt-2 pt-1\"</span> <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"inputEmail\"</span><span class=\"token operator\">&gt;</span>\r\n                    Email<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">&gt;</span>\r\n		<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"email\"</span> value<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"{{ last_username }}\"</span> \r\n                    name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"email\"</span> id<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"inputEmail\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"form-control\"</span> autocomplete<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"email\"</span> \r\n                    required autofocus<span class=\"token operator\">&gt;</span>\r\n	<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\r\n	<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"mb-3\"</span><span class=\"token operator\">&gt;</span>\r\n		<span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"inputPassword\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"form-label required d-block mt-2\"</span><span class=\"token operator\">&gt;</span>\r\n                        Password<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">&gt;</span>\r\n		<span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"password\"</span> id<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"inputPassword\"</span> \r\n                <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"form-control\"</span> autocomplete<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"current-password\"</span> required<span class=\"token operator\">&gt;</span>\r\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\r\n	<span class=\"token operator\">&lt;</span>input\r\n	    type<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"hidden\"</span> name<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"_csrf_token\"</span> value<span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"{{ csrf_token(\'authenticate\') }}\"</span><span class=\"token operator\">&gt;</span>\r\n                    <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"btn-action px-4\"</span><span class=\"token operator\">&gt;</span>\r\n			Sign in\r\n		    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span>\r\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span></code></pre>\r\n<p>and that&rsquo;s it. &ldquo;app_register&rdquo; route with handle our registration form and &ldquo;app_login&rdquo; logging in.</p>\r\n<p>&nbsp;</p>');

-- --------------------------------------------------------

--
-- Table structure for table `article_category`
--

CREATE TABLE `article_category` (
  `article_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `article_category`
--

INSERT INTO `article_category` (`article_id`, `category_id`) VALUES
(1, 5),
(2, 1),
(2, 2),
(3, 1),
(3, 2),
(4, 7),
(4, 8),
(5, 7),
(6, 1),
(6, 2);

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

CREATE TABLE `category` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `category`
--

INSERT INTO `category` (`id`, `name`) VALUES
(1, 'php'),
(2, 'symfony'),
(3, 'swift'),
(4, 'news'),
(5, 'mySQL'),
(6, 'twig'),
(7, 'html/css'),
(8, 'javascript');

-- --------------------------------------------------------

--
-- Table structure for table `doctrine_migration_versions`
--

CREATE TABLE `doctrine_migration_versions` (
  `version` varchar(191) COLLATE utf8_unicode_ci NOT NULL,
  `executed_at` datetime DEFAULT NULL,
  `execution_time` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `doctrine_migration_versions`
--

INSERT INTO `doctrine_migration_versions` (`version`, `executed_at`, `execution_time`) VALUES
('DoctrineMigrations\\Version20230103203133', '2023-01-03 20:31:41', 139);

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `email` varchar(180) COLLATE utf8mb4_unicode_ci NOT NULL,
  `roles` json NOT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`id`, `email`, `roles`, `password`) VALUES
(1, 'user@user.com', '[]', '$2y$13$X625fpqXdPgeGBrhVndcxurhSp6/C4BbbKmZOKuSkMxVdP9OtCwhO'),
(2, 'admin@admin.com', '[\"ROLE_ADMIN\"]', '$2y$13$KJA249nMAXJLurU0lslBS.0IbBQjZFcBfjaLoF9.OQRTL3EYSUVvS');

-- --------------------------------------------------------

--
-- Table structure for table `website_settings`
--

CREATE TABLE `website_settings` (
  `id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `article_category`
--
ALTER TABLE `article_category`
  ADD PRIMARY KEY (`article_id`,`category_id`),
  ADD KEY `IDX_53A4EDAA7294869C` (`article_id`),
  ADD KEY `IDX_53A4EDAA12469DE2` (`category_id`);

--
-- Indexes for table `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `doctrine_migration_versions`
--
ALTER TABLE `doctrine_migration_versions`
  ADD PRIMARY KEY (`version`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `UNIQ_8D93D649E7927C74` (`email`);

--
-- Indexes for table `website_settings`
--
ALTER TABLE `website_settings`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT for table `category`
--
ALTER TABLE `category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT for table `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `website_settings`
--
ALTER TABLE `website_settings`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `article_category`
--
ALTER TABLE `article_category`
  ADD CONSTRAINT `FK_53A4EDAA12469DE2` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `FK_53A4EDAA7294869C` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
